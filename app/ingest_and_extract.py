import os
import sys
from datetime import datetime, timezone
from dateutil import tz
import psycopg
from psycopg.rows import dict_row

# ---------- helpers ----------
def log(msg: str):
    now_utc = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{now_utc} UTC] {msg}", flush=True)

def get_env(name: str) -> str:
    val = os.getenv(name)
    if not val:
        log(f"‚ùå ENV {name} is missing")
        sys.exit(1)
    return val

# ---------- main ----------
def main():
    log("‚úÖ Ingest job started")
    db_url = get_env("DATABASE_URL")

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î (SSL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è Supabase; –æ–±—ã—á–Ω–æ —É–∂–µ –µ—Å—Ç—å –≤ URL ?sslmode=require)
    # autocommit –≤—ã–∫–ª—é—á–µ–Ω: —è–≤–Ω—ã–π commit/rollback
    with psycopg.connect(db_url, row_factory=dict_row) as conn:
        with conn.cursor() as cur:
            # 1) –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø—Ä–æ—Å—Ç–∞—è upsert-–ª–æ–≥–∏–∫–∞)
            src_kind = "telegram"
            src_name = "–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª"
            src_url  = "https://t.me/example1"

            cur.execute("""
                select id from public.sources
                where kind = %s and coalesce(url,'') = %s and coalesce(name,'') = %s
                limit 1
            """, (src_kind, src_url, src_name))
            row = cur.fetchone()
            if row:
                source_id = row["id"]
                log(f"‚ÑπÔ∏è  Source exists: id={source_id}")
            else:
                cur.execute("""
                    insert into public.sources (kind, name, url)
                    values (%s, %s, %s)
                    returning id
                """, (src_kind, src_name, src_url))
                source_id = cur.fetchone()["id"]
                log(f"‚ûï Source created: id={source_id}")

            # 2) –í—Å—Ç–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π raw_item.
            #    –£ raw_items —Å—Ç–æ–∏—Ç unique (source_id, external_id) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π external_id,
            #    —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—É—Å–∫–∏ –Ω–µ –ø–ª–æ–¥–∏–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã.
            #    –í —Ä–µ–∞–ª—å–Ω–æ–º —Å–±–æ—Ä—â–∏–∫–µ external_id = message_id –∏–∑ Telegram.
            external_id = "test-message-0001"
            published_at = datetime.now(timezone.utc)
            author = "test_user"
            url = "https://t.me/example1/123"
            text_raw = (
                "–í–ê–ö–ê–ù–°–ò–Ø: –ò–Ω–∂–µ–Ω–µ—Ä-–≥–µ–æ–¥–µ–∑–∏—Å—Ç. –í–∞—Ö—Ç–∞ 30/15, –æ–ø–ª–∞—Ç–∞ 200 000‚Äì250 000 ‚ÇΩ/–º–µ—Å. "
                "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å —Ç–∞—Ö–µ–æ–º–µ—Ç—Ä–æ–º –∏ GNSS (Trimble/Leica), AutoCAD/Civil 3D. "
                "–ö–æ–Ω—Ç–∞–∫—Ç—ã: @hr_example, +7 (999) 123-45-67, hr@example.com. –õ–æ–∫–∞—Ü–∏—è: –¢—é–º–µ–Ω—å/–•–ú–ê–û."
            )

            cur.execute("""
                insert into public.raw_items
                    (source_id, external_id, published_at, author, url, text_raw, attachments)
                values
                    (%s, %s, %s, %s, %s, %s, %s)
                on conflict (source_id, external_id) do nothing
                returning id
            """, (source_id, external_id, published_at, author, url, text_raw, None))

            inserted = cur.fetchone()
            if inserted:
                raw_id = inserted["id"]
                log(f"üßæ raw_items inserted: id={raw_id}")
            else:
                # –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å ‚Äî —É–∑–Ω–∞–µ–º –µ—ë id (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤)
                cur.execute("""
                    select id from public.raw_items
                    where source_id=%s and external_id=%s
                """, (source_id, external_id))
                raw_id = cur.fetchone()["id"]
                log(f"‚Ü∫ raw_items already exists: id={raw_id}")

            # 3) (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ü—Ä–∏–º–µ—Ä –≤—Å—Ç–∞–≤–∫–∏ –≤ jobs "—á–µ—Ä–Ω–æ–≤–∏–∫–∞" –≤–∞–∫–∞–Ω—Å–∏–∏.
            #    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø–∞–π–ø–ª–∞–π–Ω–µ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä (LLM+–ø—Ä–∞–≤–∏–ª–∞).
            role = "–ò–Ω–∂–µ–Ω–µ—Ä-–≥–µ–æ–¥–µ–∑–∏—Å—Ç"
            description = text_raw
            posted_at = published_at

            cur.execute("""
                insert into public.jobs
                    (source_id, raw_item_id, role, employer_name, is_employer,
                     description, salary_min, salary_max, salary_currency, salary_period,
                     employment_type, schedule_type, city, region, country,
                     posted_at)
                values
                    (%s, %s, %s, %s, %s,
                     %s, %s, %s, %s, %s,
                     %s, %s, %s, %s, %s,
                     %s)
                returning id
            """, (
                source_id, raw_id, role, "–û–û–û ¬´–ì–µ–æ–¢–µ—Å—Ç¬ª", True,
                description, 200000, 250000, "RUB", "month",
                "full", "–≤–∞—Ö—Ç–∞", "–¢—é–º–µ–Ω—å", "–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "RU",
                posted_at
            ))
            job_id = cur.fetchone()["id"]
            log(f"üíæ jobs inserted: id={job_id} (fts-—Ç—Ä–∏–≥–≥–µ—Ä –∑–∞–ø–æ–ª–Ω–∏—Ç –∏–Ω–¥–µ–∫—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")

            # 4) –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç—á—ë—Ç–∞
            cur.execute("select count(*) as c from public.raw_items")
            total_raw = cur.fetchone()["c"]
            cur.execute("select count(*) as c from public.jobs")
            total_jobs = cur.fetchone()["c"]
            log(f"üìä Totals ‚Äî raw_items: {total_raw}, jobs: {total_jobs}")

        # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

    # –î–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º—è –≤ —Ç–≤–æ—ë–º –ø–æ—è—Å–µ (–ï–≤—Ä–æ–ø–∞/–ê–º—Å—Ç–µ—Ä–¥–∞–º)
    ams = datetime.now(timezone.utc).astimezone(tz.gettz("Europe/Amsterdam"))
    log(f"üïí Finished. Local time (Amsterdam): {ams.strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        log(f"üí• ERROR: {e}")
        # —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∏–ª–∞—Å—å ¬´–∫—Ä–∞—Å–Ω—ã–º¬ª –≤ Actions
        raise
